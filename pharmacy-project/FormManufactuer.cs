using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using MongoDB.Bson;
using MongoDB.Driver;
using MongoDB.Driver.Builders;
using MongoDB.Driver.Linq;

namespace cs322_projekat_pharmacy
{
    public partial class FormManufactuer : Form
    {
        /* references to Manufactuer & Medicine class */
        private Manufactuer manufactuerHelper;
        private Medicine medicineHelper;
        private Order orderHelper;

        /**
         * Constructor init 
         */
        public FormManufactuer()
        {
            InitializeComponent();
            manufactuerHelper = new Manufactuer();
            medicineHelper = new Medicine();
            orderHelper = new Order();
        }

        /**
         * When the form loads, fetch the list of actual Manufactuers
         */
        private void FormManufactuer_Load(object sender, EventArgs e)
        {
            loadManufactuersList();
        }

        /**
         * Loop through Manufactuers MongoDB collection and add/display them to ListBox. 
         * From this point, Employee will be able to select manufactuer in order to see 
         * it's list of medicine from which he will eventually order some.
         */
        public void loadManufactuersList()
        {
            foreach (Manufactuer manufact in manufactuerHelper.getManufactuers())
            {
                lb_manufactuersList.DisplayMember = "name";
                lb_manufactuersList.Items.Add(manufact);
            }
        }

        /**
         * Regarding to Employee's selection of specific Manufactuer new panel will pop out. This 
         * panel is generated by Manufactuer's ObjectId so Employee will get the list of all relevant 
         * medicines that Manufactuer possess at the moment.
         */
        private void displayMedicines(object sender, MouseEventArgs e)
        {
            var manufactuerObj = lb_manufactuersList.SelectedItem as Manufactuer;
            var medicines = medicineHelper.getMedicinesBy(manufactuerObj.id);
            pnl_orderMedicines.Visible = true;

            /* fill in new panel with content (medicines) */
            dgv_orderMedicines.DataSource = medicines;
        }

        /**
         * This method is being invoked by Employee when he decide to get from Manufactuers form
         * to dashboard.
         */
        private void exitForm(object sender, EventArgs e)
        {
            this.Close();
        }

        /**
         * This method is being invoked by Employee when he decide to get back to Manufactuers panel.
         * It close the current form.
         */
        private void exitPanel(object sender, EventArgs e)
        {
            pnl_orderMedicines.Visible = false;
        }

        /**
         * This method is being invoked when Employee wants to order some medicines. Employee
         * is able to select a list of medicines that are needed. When the order button is clicked
         * the method collects all the MedicineIds and update the is_available value for those from
         * false to true. This means that the concrete medicine is now on stock.
         */
        private void order(object sender, EventArgs e)
        {
            if (dgv_orderMedicines.SelectedRows.Count != 0)
            {
                var manufactuerObj = lb_manufactuersList.SelectedItem as Manufactuer; // Manufactuer object

                foreach (DataGridViewRow item in this.dgv_orderMedicines.SelectedRows)
                {
                    var MedicineId = (ObjectId)item.Cells[0].Value;   // get medicine id from selected item
                    medicineHelper.updateMedicines(MedicineId, true);       // update the value of selected medicines

                    Order newOrder = new Order
                    {
                        EmployeeId = Employee.Instance.id,
                        ManufactuerId = manufactuerObj.id,
                        MedicineId = MedicineId,
                        date = String.Format("{0:d/M/yyyy HH:mm:ss}", DateTime.Now)
                    };

                    orderHelper.add(newOrder);                         // persist new entry
                }

                /* refreshing datagridview */
                dgv_orderMedicines.DataSource = medicineHelper.getMedicinesBy(manufactuerObj.id);
                lbl_response.Text = "Porudžbina je uspešno napravljena.";
            }
            else
                lbl_response.Text = "Lekovi nisu odabrani ili ih nema za porudžbinu";
        }

    }
}
